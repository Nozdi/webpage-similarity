perlrun - how to execute the Perl interpreter   ] [[:] ]] [[:] ] [] ]] [] [] ] [] ]] [] [] ]] ]] [] [] []... The normal way to run a Perl program is by making it directly executable, or else by passing the name of the source file as an argument on the command line. (An interactive Perl environment is also possible---see perldebug for details on how to do that.) Upon startup, Perl looks for your program in one of the following places:

With methods 2 and 3, Perl starts parsing the input file from the beginning, unless you've specified a -x switch, in which case it scans for the first line starting with #! and containing the word ``perl'', and starts there instead. This is useful for running a program embedded in a larger message. (In this case you would indicate the end of the program using the token.)

The #! line is always examined for switches as the line is being parsed. Thus, if you're on a machine that allows only one argument with the #! line, or worse, doesn't even recognize the #! line, you still can get consistent switch behavior regardless of how Perl was invoked, even if -x was used to find the beginning of the program.

Because historically some operating systems silently chopped off kernel interpretation of the #! line after 32 characters, some switches may be passed in on the command line, and some may not; you could even get a ``-'' without its letter, if you're not careful. You probably want to make sure that all your switches fall either before or after that 32-character boundary. Most switches don't actually care if they're processed redundantly, but getting a ``-'' instead of a complete switch could cause Perl to try to execute standard input instead of your program. And a partial -I switch could also cause odd results.

Some switches do care if they are processed twice, for instance combinations of -l and -0. Either put all the switches after the 32-character boundary (if applicable), or replace the use of -0digits by .

Parsing of the #! switches starts wherever ``perl'' is mentioned in the line. The sequences ``-*'' and ``- '' are specifically ignored so that you could, if you were so inclined, say

to let Perl see the -p switch.

A similar trick involves the env program, if you have it.

The examples above use a relative path to the perl interpreter, getting whatever version is first in the user's path. If you want a specific version of Perl, say, perl5.005_57, you should place that directly in the #! line's path.

If the #! line does not contain the word ``perl'', the program named after the #! is executed instead of the Perl interpreter. This is slightly bizarre, but it helps people on machines that don't do #!, because they can tell a program that their is /usr/bin/perl, and Perl will then dispatch the program to the correct interpreter for them.

After locating your program, Perl compiles the entire program to an internal form. If there are any compilation errors, execution of the program is not attempted. (This is unlike the typical shell script, which might run part-way through before finding a syntax error.)

If the program is syntactically correct, it is executed. If the program runs off the end without hitting an exit() or die() operator, an implicit is provided to indicate successful completion.

Command-interpreters on non-Unix systems have rather different ideas on quoting than Unix shells. You'll need to learn the special characters in your command-interpreter ( , and are common) and how to protect whitespace and these characters to run one-liners (see -e below).

On some systems, you may have to change single-quotes to double ones, which you must not do on Unix or Plan 9 systems. You might also have to change a single % to a %%.

The problem is that none of this is reliable: it depends on the command and it is entirely possible neither works. If 4DOS were the command shell, this would probably work better:

.EXE in Windows slipped a lot of standard Unix functionality in when nobody was looking, but just try to find documentation for its quoting rules.

Under the Macintosh, it depends which environment you are using. The MacPerl shell, or , is much like Unix shells in its support for several quoting variants, except that it makes free use of the Macintosh's non-ASCII characters as control characters.

There is no general solution to all of this. It's just a mess.

In this documentation, on the first line of the program will stand in for whatever method works on your system. You are advised to use a specific path if you care about a specific version.

or if you just want to be running at least version, place a statement like this at the top of your program:

specifies the input record separator ( ) as an octal number. If there are no digits, the null character is the separator. Other switches may precede or follow the digits. For example, if you have a version of find which can print filenames terminated by the null character, you can say this: The special value 00 will cause Perl to slurp files in paragraph mode. The value 0777 will cause Perl to slurp files whole because there is no legal character with that value. turns on autosplit mode when used with a -n or -p. An implicit split command to the array is done as the first thing inside the implicit while loop produced by the -n or -p. An alternate delimiter may be specified using -F. enables Perl to use the native wide character APIs on the target system. The magic variable reflects the state of this switch. See ``${^WIDE_SYSTEM_CALLS}'' in perlvar. This feature is currently only implemented on the Win32 platform. causes Perl to check the syntax of the program and then exit without executing it. Actually, it will execute , , and blocks, because these are considered as occurring outside the execution of your program. and blocks, however, will be skipped. runs the program under the Perl debugger. See perldebug. runs the program under the control of a debugging, profiling, or tracing module installed as Devel::foo. E.g., -d:DProf executes the program using the Devel::DProf profiler. As with the -M flag, options may be passed to the Devel::foo package where they will be received and interpreted by the Devel::foo::import routine. The comma-separated list of options must follow a character. See perldebug. sets debugging flags. To watch how it executes your program, use -Dtls. (This works only if debugging is compiled into your Perl.) Another nice value is -Dx, which lists your compiled syntax tree. And -Dr displays compiled regular expressions; the format of the output is explained in perldebguts. As an alternative, specify a number instead of list of letters (e.g., -D14 is equivalent to -Dtls): 1 p Tokenizing and parsing 2 s Stack snapshots 4 l Context (loop) stack processing 8 t Trace execution 16 o Method and overloading resolution 32 c String/numeric conversions 64 P Print profiling info, preprocessor command for -P, source file input state 128 m Memory allocation 256 f Format processing 512 r Regular expression parsing and execution 1024 x Syntax tree dump 2048 u Tainting checks 4096 (Obsolete, previously used for LEAKTEST) 8192 H Hash dump -- usurps values() 16384 X Scratchpad allocation 32768 D Cleaning up 65536 S Thread synchronization 131072 T Tokenising 262144 R Include reference counts of dumped variables (eg when using -Ds) 524288 J Do not s,t,P-debug (Jump over) opcodes within package DB All these flags require -DDEBUGGING when you compile the Perl executable (but see Devel::Peek, re which may change this). See the file in the Perl source distribution for how to do this. This flag is automatically set if you include -g option when asks you about optimizer/debugger flags. If you're just trying to get a print out of each line of Perl code as it executes, the way that provides for shell scripts, you can't use Perl's -D switch. Instead do this # If you have "env" utility env=PERLDB_OPTS="NonStop=1 AutoTrace=1 frame=2" perl -dS program See perldebug for details and variations. may be used to enter one line of program. If -e is given, Perl will not look for a filename in the argument list. Multiple -e commands may be given to build up a multi-line script. Make sure to use semicolons where you would in a normal program. specifies the pattern to split on if -a is also in effect. The pattern may be surrounded by , , or , otherwise it will be put in single quotes. specifies that files processed by the construct are to be edited in-place. It does this by renaming the input file, opening the output file by the original name, and selecting that output file as the default for print() statements. The extension, if supplied, is used to modify the name of the old file to make a backup copy, following these rules: If no extension is supplied, no backup is made and the current file is overwritten. If the extension doesn't contain a , then it is appended to the end of the current filename as a suffix. If the extension does contain one or more characters, then each is replaced with the current filename. In Perl terms, you could think of this as: This allows you to add a prefix to the backup file, instead of (or in addition to) a suffix: Or even to place backup copies of the original files into another directory (provided the directory already exists): These sets of one-liners are equivalent: is the same as using the program: #!/usr/bin/perl $extension = '.orig'; LINE: while (<>) { if ($ARGV ne $oldargv) { if ($extension !~ /\*/) { $backup = $ARGV . $extension; } else { ($backup = $extension) =~ s/\*/$ARGV/g; } rename($ARGV, $backup); open(ARGVOUT, ">$ARGV"); select(ARGVOUT); $oldargv = $ARGV; } s/foo/bar/; } continue { print; # this prints to original filename } select(STDOUT); except that the -i form doesn't need to compare to to know when the filename has changed. It does, however, use for the selected filehandle. Note that is restored as the default output filehandle after the loop. As shown above, Perl creates the backup file whether or not any output is actually changed. So this is just a fancy way to copy files: You can use without parentheses to locate the end of each input file, in case you want to append to each file, or reset line numbering (see example in ``eof'' in perlfunc). If, for a given file, Perl is unable to create the backup file as specified in the extension then it will skip that file and continue on with the next one (if it exists). For a discussion of issues surrounding file permissions and -i, see ``Why does Perl let me delete read-only files? Why does -i clobber protected files? Isn't this a bug in Perl?'' in perlfaq5. You cannot use -i to create directories or to strip extensions from files. Perl does not expand in filenames, which is good, since some folks use it for their backup files: Finally, the -i switch does not impede execution when no files are given on the command line. In this case, no backup is made (the original file cannot, of course, be determined) and processing proceeds from to as might be expected. Directories specified by -I are prepended to the search path for modules ( ), and also tells the C preprocessor where to search for include files. The C preprocessor is invoked with -P; by default it searches /usr/include and /usr/lib/perl. enables automatic line-ending processing. It has two separate effects. First, it automatically chomps (the input record separator) when used with -n or -p. Second, it assigns (the output record separator) to have the value of octnum so that any print statements will have that separator added back on. If octnum is omitted, sets to the current value of . For instance, to trim lines to 80 columns: Note that the assignment is done when the switch is processed, so the input record separator can be different than the output record separator if the -l switch is followed by a -0 switch: This sets to newline and then sets to the null character. -mmodule executes module before executing your program. -Mmodule executes module before executing your program. You can use quotes to add extra code after the module name, e.g., . If the first character after the -M or -m is a dash ( ) then the 'use' is replaced with 'no'. A little builtin syntactic sugar means you can also say -mmodule=foo,bar or -Mmodule=foo,bar as a shortcut for . This avoids the need to use quotes when importing symbols. The actual code generated by -Mmodule=foo,bar is . Note that the form removes the distinction between -m and -M. causes Perl to assume the following loop around your program, which makes it iterate over filename arguments somewhat like sed -n or awk: LINE: while (<>) { ... # your program goes here } Note that the lines are not printed by default. See -p to have lines printed. If a file named by an argument cannot be opened for some reason, Perl warns you about it and moves on to the next file. Here is an efficient way to delete all files older than a week: This is faster than using the -exec switch of find because you don't have to start a process on every filename found. It does suffer from the bug of mishandling newlines in pathnames, which you can fix if you follow the example under -0. and blocks may be used to capture control before or after the implicit program loop, just as in awk. causes Perl to assume the following loop around your program, which makes it iterate over filename arguments somewhat like sed: LINE: while (<>) { ... # your program goes here } continue { print or die "-p destination: $!

"; } If a file named by an argument cannot be opened for some reason, Perl warns you about it, and moves on to the next file. Note that the lines are printed automatically. An error occurring during printing is treated as fatal. To suppress printing use the -n switch. A -p overrides a -n switch. and blocks may be used to capture control before or after the implicit loop, just as in awk. Use of -P is strongly discouraged because of its inherent problems, including poor portability. This option causes your program to be run through the C preprocessor before compilation by Perl. Because both comments and cpp directives begin with the # character, you should avoid starting comments with any words recognized by the C preprocessor such as , , or . If you're considering using , you might also want to look at the Filter::cpp module from . The problems of -P include, but are not limited to: The line is stripped, so any switches there don't apply. All lines that begin with (whitespace and) a but do not look like cpp commands, are stripped, including anything inside Perl strings, regular expressions, and here-docs . In some platforms the C preprocessor knows too much: it knows about the C -style until-end-of-line comments starting with . This will cause problems with common Perl constructs like because after -P this will became illegal code The workaround is to use some other quoting separator than , like for example : It requires not only a working C preprocessor but also a working sed. If not on , you are probably out of luck on this. The does not work with . enables rudimentary switch parsing for switches on the command line after the program name but before any filename arguments (or before an argument of --). This means you can have switches with two leading dashes (--help). Any switch found there is removed from and sets the corresponding variable in the Perl program. The following program prints ``1'' if the program is invoked with a -xyz switch, and ``abc'' if it is invoked with -xyz=abc. Do note that --help creates the variable ${-help}, which is not compliant with . makes Perl use the environment variable to search for the program (unless the name of the program contains directory separators). On some platforms, this also makes Perl append suffixes to the filename while searching for it. For example, on Win32 platforms, the ``.bat'' and ``.cmd'' suffixes are appended if a lookup for the original name fails, and if the name does not already end in one of those suffixes. If your Perl was compiled with turned on, using the -Dp switch to Perl shows how the search progresses. Typically this is used to emulate #! startup on platforms that don't support #!. This example works on many platforms that have a shell compatible with Bourne shell: The system ignores the first line and feeds the program to /bin/sh, which proceeds to try to execute the Perl program as a shell script. The shell executes the second line as a normal shell command, and thus starts up the Perl interpreter. On some systems doesn't always contain the full pathname, so the -S tells Perl to search for the program if necessary. After Perl locates the program, it parses the lines and ignores them because the variable is never true. If the program will be interpreted by csh, you will need to replace with , even though that doesn't understand embedded spaces (and such) in the argument list. To start up sh rather than csh, some systems may have to replace the #! line with a line containing just a colon, which will be politely ignored by Perl. Other systems can't control that, and need a totally devious construct that will work under any of csh, sh, or Perl, such as the following: If the filename supplied contains directory separators (i.e., is an absolute or relative pathname), and if that file is not found, platforms that append file extensions will do so and try to look for the file with those extensions added, one by one. On DOS-like platforms, if the program does not contain directory separators, it will first be searched for in the current directory before being searched for on the . On Unix platforms, the program will be searched for strictly on the . Like -T, but taint checks will issue warnings rather than fatal errors. These warnings can be controlled normally with . this is not a substitute for -T. This is meant only to be used as a temporary development aid while securing legacy code: for real production code and for new secure code written from scratch always use the real -T. forces ``taint'' checks to be turned on so you can test them. Ordinarily these checks are done only when running setuid or setgid. It's a good idea to turn them on explicitly for programs that run on behalf of someone else whom you might not necessarily trust, such as programs or any internet servers you might write in Perl. See perlsec for details. For security reasons, this option must be seen by Perl quite early; usually this means it must appear early on the command line or in the #! line for systems which support that construct. This obsolete switch causes Perl to dump core after compiling your program. You can then in theory take this core dump and turn it into an executable file by using the undump program (not supplied). This speeds startup at the expense of some disk space (which you can minimize by stripping the executable). (Still, a ``hello world'' executable comes out to about 200K on my machine.) If you want to execute a portion of your program before dumping, use the dump() operator instead. Note: availability of undump is platform specific and may not be available for a specific port of Perl. This switch has been superseded in favor of the new Perl code generator backends to the compiler. See B and B::Bytecode for details. allows Perl to do unsafe operations. Currently the only ``unsafe'' operations are the unlinking of directories while running as superuser, and running setuid programs with fatal taint checks turned into warnings. Note that the -w switch (or the variable) must be used along with this option to actually generate the taint-check warnings. prints the version and patchlevel of your perl executable. prints summary of the major perl configuration values and the current values of . Prints to the value of the named configuration variable. For example, will provide strong clues about what your variable should be set to in order to access the Perl documentation. prints warnings about dubious constructs, such as variable names that are mentioned only once and scalar variables that are used before being set, redefined subroutines, references to undefined filehandles or filehandles opened read-only that you are attempting to write on, values used as a number that doesn't look like numbers, using an array as though it were a scalar, if your subroutines recurse more than 100 deep, and innumerable other things. This switch really just enables the internal variable. You can disable or promote into fatal errors specific warnings using hooks, as described in perlvar and ``warn'' in perlfunc. See also perldiag and perltrap. A new, fine-grained warning facility is also available if you want to manipulate entire classes of warnings; see warnings or perllexwarn. Enables all warnings regardless of or . See perllexwarn. Disables all warnings regardless of or . See perllexwarn. tells Perl that the program is embedded in a larger chunk of unrelated text, such as in a mail message. Leading garbage will be discarded until the first line that starts with #! and contains the string ``perl''. Any meaningful switches on that line will be applied. If a directory name is specified, Perl will switch to that directory before running the program. The -x switch controls only the disposal of leading garbage. The program must be terminated with if there is trailing garbage to be ignored (the program can process any or all of the trailing garbage via the filehandle if desired).

Important: Use the man command (% man) to see how a command is used on your particular computer.